<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.11.0.0">
<procedure name="processImageHalcon">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageHalcon" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Multi" base_type="ctrl" dimension="0"/>
<par name="OldXYFarthestPoint" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="GrayVal" base_type="ctrl" dimension="0"/>
<par name="DeptVal" base_type="ctrl" dimension="0"/>
<par name="XYFarthestPoint" base_type="ctrl" dimension="0"/>
<par name="test" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_image_size (Z, Width, Height)</l>
<c></c>
<l>scale_image (Z, ImageDepthScaled, Multi, 0)</l>
<l>convert_image_type (ImageDepthScaled, ImageScaled, 'byte')</l>
<l>rotate_image (ImageScaled, ImageRotated, 180, 'constant')</l>
<l>get_grayval (ImageScaled, Height/2, Width/2, GrayVal)</l>
<c></c>
<c></c>
<l>treshholdregion := 2500*Multi</l>
<l>tuple_round (treshholdregion, treshholdregion)</l>
<c></c>
<l>*threshold (ImageRotated, Regions, 18, 126)</l>
<l>threshold (ImageRotated, Regions,treshholdregion, 255)</l>
<l>opening_circle (Regions, RegionOpening, 3)</l>
<l>erosion_circle (RegionOpening, RegionInterest, 20)</l>
<c></c>
<c>* if using avoid region logic, use this function</c>
<l>* dilation_circle (RegionOpening, RegionInterest, 20)</l>
<l>distance_transform (RegionInterest, DistanceImage, 'chessboard', 'true', Width, Height)</l>
<l>min_max_gray(RegionInterest, DistanceImage, 0, _, MaxValue, _)</l>
<c></c>
<l>threshold(DistanceImage, FarthestEdgeaPointRegion, MaxValue, MaxValue)</l>
<l>area_center(FarthestEdgeaPointRegion, _, RowFarthestEdge, ColFarthestEdge)</l>
<l>tuple_round (RowFarthestEdge, RowFarthestEdge)</l>
<l>tuple_round (ColFarthestEdge, ColFarthestEdge)</l>
<c></c>
<c>*Return iconic variables</c>
<l>region_to_bin (RegionInterest, ImageHalcon, 255, 0, Width, Height)</l>
<c>*Return control variables</c>
<l>XYFarthestPoint := [ColFarthestEdge,RowFarthestEdge]</l>
<l>DeptVal := GrayVal/Multi</l>
<l>tuple_round (DeptVal, DeptVal)</l>
<l>test := OldXYFarthestPoint[0]</l>
<l>return ()</l>
</body>
<docu id="processImageHalcon">
<parameters>
<parameter id="DeptVal"/>
<parameter id="GrayVal"/>
<parameter id="ImageHalcon"/>
<parameter id="Multi"/>
<parameter id="OldXYFarthestPoint"/>
<parameter id="XYFarthestPoint"/>
<parameter id="Z"/>
<parameter id="test"/>
</parameters>
</docu>
</procedure>
</hdevelop>
